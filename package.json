{
  "name": "CopyCatBundler",
  "displayName": "CopyCat Bundler",
  "description": "Easily bundle files for LLM context windows.",
  "version": "0.0.8",
  "publisher": "LandonKleinbrodt",
  "icon": "images/icon.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/lkleinbrodt/Copycat.git"
  },
  "engines": {
    "vscode": "^1.85.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "configuration": {
      "title": "CopyCat",
      "properties": {
        "copyCatBundler.showIgnoredNodes": {
          "type": "boolean",
          "default": false,
          "description": "Whether to show ignored files and folders in the tree view. When enabled, ignored items will be displayed but greyed out."
        },
        "copyCatBundler.systemPrompt": {
          "type": "string",
          "default": "You are a senior software architect and planning expert. Your role is to analyze the provided codebase and user request, then generate a comprehensive, detailed step-by-step plan that an AI coding agent can follow to accomplish the task.\n\nYour plan must include:\n1. **Context Analysis**: Summarize the relevant codebase structure, patterns, and technologies\n2. **Objective Breakdown**: Clearly define what needs to be accomplished\n3. **Detailed Steps**: Provide specific, actionable steps with file paths, function names, and implementation details\n4. **Dependencies**: Identify any new dependencies, imports, or setup requirements\n5. **Testing Strategy**: Suggest how to verify the implementation works correctly\n6. **Edge Cases**: Consider potential issues and how to handle them\n\nRemember: The coding agent will only have access to the files you've selected, so provide all necessary context and be extremely specific about what needs to be done.",
          "description": "A system prompt prepended to every request when using Copy to Clipboard with Prompt. Helps guide the LLM on how to interpret the request."
        },
        "copyCatBundler.defaultIgnorePatterns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "*.png",
            "*.jpg",
            "*.jpeg",
            "*.gif",
            "*.bmp",
            "*.svg",
            "*.ico",
            "*.webp",
            "*.tiff",
            "*.tif",
            "*.csv",
            "*.xlsx",
            "*.xls",
            "package-lock.json",
            "yarn.lock",
            "pnpm-lock.yaml",
            "composer.lock",
            "Gemfile.lock",
            "Pipfile.lock",
            "poetry.lock",
            "Cargo.lock",
            "go.sum",
            "mix.lock",
            "*.min.json",
            "*.bundle.json",
            "*.config.json",
            "tsconfig.json",
            "jsconfig.json",
            "*.min.xml",
            "*.bundle.xml",
            "*.zip",
            "*.tar",
            "*.gz",
            "*.rar",
            "*.7z",
            "*.ipa",
            "*.apk",
            "*.dmg",
            "*.pkg",
            "*.deb",
            "*.rpm",
            "*.exe",
            "*.msi",
            "*.app",
            "*.dll",
            "*.so",
            "*.dylib",
            "*.jar",
            "*.war",
            "*.ear",
            "*.class",
            "*.o",
            "*.obj",
            "*.a",
            "*.lib",
            "*.mp4",
            "*.avi",
            "*.mov",
            "*.wmv",
            "*.flv",
            "*.webm",
            "*.mkv",
            "*.m4v",
            "*.3gp",
            "*.mp3",
            "*.wav",
            "*.flac",
            "*.aac",
            "*.ogg",
            "*.m4a",
            "*.wma",
            "*.pdf",
            "*.doc",
            "*.docx",
            "*.ppt",
            "*.pptx",
            "*.odt",
            "*.ods",
            "*.odp",
            "*.db",
            "*.sqlite",
            "*.sqlite3",
            "*.mdb",
            "*.accdb",
            "*.db3",
            "*.dbf",
            "*.fdb",
            "*.myd",
            "*.frm",
            "*.sql",
            "*.dump",
            "*.backup",
            "*.log",
            "*.tmp",
            "*.temp",
            "*.cache",
            "*.lock",
            "node_modules/",
            "venv/",
            "env/",
            ".venv/",
            ".env/",
            "__pycache__/",
            "*.pyc",
            "*.pyo",
            "*.pyd",
            "*.pycache",
            "*.DS_Store",
            "Thumbs.db",
            "desktop.ini",
            "*.lnk",
            ".vscode/",
            ".idea/",
            "*.swp",
            "*.swo",
            "*~",
            ".#*",
            ".sublime-*",
            ".atom/",
            ".emacs.d/",
            ".vim/",
            ".vimrc",
            ".gvimrc",
            ".nvim/",
            ".config/",
            ".local/",
            ".Trash/",
            ".Spotlight-V100/",
            ".fseventsd/",
            ".VolumeIcon.icns",
            ".com.apple.timemachine.donotpresent",
            "*.min.js",
            "*.min.css",
            "dist/",
            "build/",
            "out/",
            "target/",
            "bin/",
            "obj/",
            "coverage/",
            ".nyc_output/",
            "jspm_packages/",
            "bower_components/",
            "vendor/",
            "lib/",
            "libs/",
            "packages/",
            "bundle/",
            "bundles/",
            "public/",
            "static/",
            "assets/",
            "uploads/",
            "downloads/",
            "temp/",
            "tmp/",
            "cache/",
            ".cache/",
            "*.map",
            "*.min.map",
            "*.bundle.js",
            "*.bundle.css",
            "*.chunk.js",
            "*.chunk.css"
          ],
          "description": "Default file patterns to ignore. These patterns are applied in addition to .gitignore and .contextignore rules. Patterns follow the same syntax as .gitignore files."
        },
        "copyCatBundler.fileTreeMode": {
          "type": "string",
          "enum": [
            "full",
            "relevant",
            "none"
          ],
          "default": "relevant",
          "description": "Controls how the file tree is included when copying files to clipboard. 'full' includes the complete project structure, 'relevant' includes only files and folders that are part of the user's selection, and 'none' excludes the file tree entirely."
        }
      }
    },
    "views": {
      "explorer": [
        {
          "id": "copyCatBundlerView",
          "name": "CopyCat",
          "type": "tree"
        }
      ]
    },
    "commands": [
      {
        "command": "copycat.copyToClipboard",
        "title": "CopyCat: Copy Selected Files to Clipboard",
        "icon": "$(clippy)"
      },
      {
        "command": "copycat.copyToClipboardWithPrompt",
        "title": "CopyCat: Copy Selected Files to Clipboard with Prompt",
        "icon": "$(comment)"
      },
      {
        "command": "copycat.setFileTreeMode",
        "title": "CopyCat: Set File Tree Mode",
        "icon": "$(list-tree)"
      },
      {
        "command": "copycat.setSystemPrompt",
        "title": "CopyCat: Set System Prompt",
        "icon": "$(gear)"
      },
      {
        "command": "copycat.toggleNode",
        "title": "Toggle Node"
      },
      {
        "command": "copycat.debugSettings",
        "title": "Debug CopyCat Settings"
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "copycat.copyToClipboard",
          "when": "view == copyCatBundlerView",
          "group": "navigation"
        },
        {
          "command": "copycat.setFileTreeMode",
          "when": "view == copyCatBundlerView",
          "group": "navigation"
        },
        {
          "command": "copycat.setSystemPrompt",
          "when": "view == copyCatBundlerView",
          "group": "navigation"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src",
    "test": "node ./out/test/runTest"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.10",
    "@types/node": "^20.11.19",
    "@types/sinon": "^17.0.4",
    "@types/vscode": "^1.85.0",
    "@typescript-eslint/eslint-plugin": "^8.35.1",
    "@typescript-eslint/parser": "^8.35.1",
    "@vscode/test-electron": "^2.5.2",
    "eslint": "^9.30.1",
    "eslint-config-prettier": "^10.1.5",
    "mocha": "^11.7.1",
    "sinon": "^21.0.0",
    "typescript": "^5.2.2"
  },
  "dependencies": {
    "ignore": "^5.3.1"
  }
}